# -*- coding: utf-8 -*-
"""FP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16jHiwQTHxU3Vr6SNNNO1TSq5L6hzhSRQ
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import tensorflow as tf
import numpy as np
import joblib

# --- Helper functions to load data and models ---
@st.cache_resource
def load_resources(stock_ticker):
    """
    Loads all necessary models, scalers, and data for a given stock ticker.
    """
    try:
        # Load the LSTM model
        lstm_model = tf.keras.models.load_model(f'lstm_model_{stock_ticker.lower()}.h5')

        # Load the scaler
        scaler = joblib.load(f'scaler_{stock_ticker.lower()}.pkl')

        # Load the actual volatility data
        df_actual = pd.read_csv(f'{stock_ticker.lower()}_rolling_volatility.csv', index_col='Date', parse_dates=True)

        # Load the GARCH predictions
        df_garch = pd.read_csv(f'garch_{stock_ticker.lower()}_predictions.csv', index_col='Date', parse_dates=True)

        return lstm_model, scaler, df_actual, df_garch

    except FileNotFoundError as e:
        st.error(f"Error: Required file not found - {e}. Please ensure all files are in the same directory as the app.py script.")
        return None, None, None, None

def prepare_data_and_predict(lstm_model, scaler, df_actual):
    """
    Prepares data and makes predictions using the LSTM model.
    """
    # The LSTM was trained with a lookback of 60 days
    n_steps = 60

    # Scale the entire dataset for consistency
    scaled_data = scaler.transform(df_actual[['rolling_vol_5']])

    # Prepare the input sequence for prediction
    X_pred = scaled_data[-n_steps:].reshape(1, n_steps, 1)

    # Make a prediction
    predicted_scaled = lstm_model.predict(X_pred)[0][0]

    # Inverse transform the prediction
    last_volatility = scaled_data[-1][0]
    predicted_volatility = scaler.inverse_transform([[predicted_scaled, last_volatility]])[0][0]

    # Create a new DataFrame for predictions for plotting
    df_pred = df_actual.copy()
    df_pred['lstm_predictions'] = np.nan
    df_pred.iloc[-1, df_pred.columns.get_loc('lstm_predictions')] = predicted_volatility

    return predicted_volatility, df_pred

# --- Streamlit App Layout ---
st.set_page_config(layout="wide", page_title="Volatility Prediction Dashboard")
st.title('Volatility Prediction Dashboard')

# --- Sidebar for user input ---
st.sidebar.header('Configuration')
stock_ticker = st.sidebar.selectbox('Select a stock:', ('QQQ', 'SPY'))
st.sidebar.markdown(f"**Selected Stock:** :blue[{stock_ticker}]")

# --- Main content area ---
if stock_ticker:
    # Hardcoded evaluation metrics from your notebook
    if stock_ticker == 'QQQ':
        evaluation_scores = {
            'Metric': ['MSE', 'MAE', 'R-squared'],
            'Score': [0.000305, 0.01053, 0.73]
        }
    else: # SPY
        evaluation_scores = {
            'Metric': ['MSE', 'MAE', 'R-squared'],
            'Score': [0.000216, 0.00892, 0.69]
        }

    # Load all the data
    lstm_model, scaler, df_actual, df_garch = load_resources(stock_ticker)

    if lstm_model and scaler is not None:
        st.subheader(f'Volatility Prediction for {stock_ticker}')
        st.write('Forecasting 5-day rolling volatility using an LSTM model for comparison with GARCH.')

        # Make LSTM predictions
        predicted_volatility, df_pred = prepare_data_and_predict(lstm_model, scaler, df_actual)

        # Combine data for plotting
        combined_df = df_actual.copy()
        combined_df['LSTM Prediction'] = df_pred['lstm_predictions']
        combined_df['GARCH Prediction'] = df_garch['garch_predictions']

        # --- Graph 1: Actual vs. LSTM Prediction ---
        st.header('Actual vs. Predicted Volatility (LSTM)')
        fig_lstm = px.line(combined_df, y=['rolling_vol_5', 'LSTM Prediction'],
                         title='Actual vs. LSTM Predicted Volatility',
                         labels={'value': 'Volatility', 'Date': 'Date'},
                         color_discrete_map={'rolling_vol_5': 'blue', 'LSTM Prediction': 'orange'})
        fig_lstm.update_layout(xaxis_title="Date", yaxis_title="Volatility")
        st.plotly_chart(fig_lstm, use_container_width=True)

        # --- Graph 2: LSTM vs. GARCH Prediction ---
        st.header('LSTM vs. GARCH Predictions')
        fig_comparison = px.line(combined_df, y=['LSTM Prediction', 'GARCH Prediction'],
                                 title='Comparison of LSTM and GARCH Predictions',
                                 labels={'value': 'Predicted Volatility', 'Date': 'Date'},
                                 color_discrete_map={'LSTM Prediction': 'orange', 'GARCH Prediction': 'green'})
        fig_comparison.update_layout(xaxis_title="Date", yaxis_title="Predicted Volatility")
        st.plotly_chart(fig_comparison, use_container_width=True)

        # --- Evaluation Table ---
        st.header(f'Evaluation Scores for LSTM Model ({stock_ticker})')
        eval_df = pd.DataFrame(evaluation_scores).set_index('Metric')
        st.table(eval_df)